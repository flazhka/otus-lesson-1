# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  config.vm.box = "centos/7"

  config.vm.provider "virtualbox" do |v|
	  v.memory = 256
  end

  config.vm.define "inetRouter" do |inetRouter|
    inetRouter.vm.network "private_network", ip: "192.168.255.1", virtualbox__intnet: "net_router"
    inetRouter.vm.network "private_network", ip: "192.168.255.2", virtualbox__intnet: "net_router"
    inetRouter.vm.network "private_network", ip: "192.168.56.10"
    inetRouter.vm.hostname = "inetRouter"
  end

  config.vm.define "centralRouter" do |centralRouter|
    centralRouter.vm.network "private_network", ip: "192.168.255.1", virtualbox__intnet: "net_router"
    centralRouter.vm.network "private_network", ip: "192.168.255.2", virtualbox__intnet: "net_router"
    centralRouter.vm.network "private_network", ip: "10.10.10.100", virtualbox__intnet: "net_vlan"
    centralRouter.vm.network "private_network", ip: "192.168.56.11"
    centralRouter.vm.hostname = "centralRouter"
  end

  config.vm.define "testClient1" do |testClient1|
    testClient1.vm.network "private_network", ip: "10.10.10.1", virtualbox__intnet: "net_vlan"
    testClient1.vm.network "private_network", ip: "192.168.56.12"
    testClient1.vm.hostname = "testClient1"
  end

  config.vm.define "testServer1" do |testServer1|
    testServer1.vm.network "private_network", ip: "10.10.10.254", virtualbox__intnet: "net_vlan"
    testServer1.vm.network "private_network", ip: "192.168.56.13"
    testServer1.vm.hostname = "testServer1"
  end

  config.vm.define "testClient2" do |testClient2|
    testClient2.vm.network "private_network", ip: "10.10.10.1", virtualbox__intnet: "net_vlan"
    testClient2.vm.network "private_network", ip: "192.168.56.14"
    testClient2.vm.hostname = "testClient2"
  end

  config.vm.define "testServer2" do |testServer2|
    testServer2.vm.network "private_network", ip: "10.10.10.254", virtualbox__intnet: "net_vlan"
    testServer2.vm.network "private_network", ip: "192.168.56.15"
    testServer2.vm.hostname = "testServer2"

    testServer2.vm.provision "ansible" do |ansible|
      #ansible.verbose = "vvv"
      ansible.playbook = "provision.yml"
      ansible.inventory_path = "inventories/inventory.yml"
      ansible.become = "true"
      ansible.host_key_checking = "false"
      ansible.limit = "all"
    end
  end
  
  config.vm.provision "shell", inline: <<-SHELL
    mkdir -p ~root/.ssh; cp ~vagrant/.ssh/auth* ~root/.ssh
    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
    systemctl restart sshd
  SHELL
  
end
